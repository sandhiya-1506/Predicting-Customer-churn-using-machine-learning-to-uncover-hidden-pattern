# -*- coding: utf-8 -*-
"""churn predictcse.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Ev0Se0fsS_Yf6tkNAMCdE40X_ZZn38N
"""

from google.colab import files
uploaded=files.upload()

"""load data set"""

import pandas as pd
df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn (2).csv")

"""data Exploration"""

print("shape:",df.shape)
print("cloumns:",df.columns.tolist())
df.info()
df.describe()

df.head()

df.head()

print(df.isnull().sum())
print("duplicated rows:",df.duplicated().sum())

# Identify Target and Features
target = 'Churn'
features = df.columns.drop(target)

# Display
print("Target:", target)
print("Features:", features.tolist())

# Convert Categorical Columns to Numerical
categorical_cols = df.select_dtypes(include=['object']).columns
print("Categorical Columns:", categorical_cols.tolist())

df_encoded=pd.get_dummies(df,drop_first=True)

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
X_scaled=scaler.fit_transform(df_encoded.drop('MonthlyCharges',axis=1))
y=df_encoded['MonthlyCharges']

import pandas as pd
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
file_path="data/WA_Fn-UseC_-Telco-Customer-Churn (2).csv"
df=pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn (2).csv")
#Convert TotalCharges to numeric (some values may be spaces or non-numeric)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

# Drop rows with missing values
df.dropna(inplace=True)

# Set style
sns.set(style="whitegrid")

# 1. Churn Count Plot
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Churn', palette='Set2')
plt.title("Customer Churn Count")
plt.show()

# 2. Churn by Contract Type
plt.figure(figsize=(8, 4))
sns.countplot(data=df, x='Contract', hue='Churn', palette='Set1')
plt.title("Churn by Contract Type")
plt.xticks(rotation=15)
plt.show()

# 3. Distribution of Monthly Charges
plt.figure(figsize=(8, 4))
sns.histplot(df['MonthlyCharges'], bins=30, kde=True)
plt.title("Distribution of Monthly Charges")
plt.xlabel("Monthly Charges")
plt.ylabel("Number of Customers")
plt.show()

# 4. Monthly Charges vs. Total Charges (colored by Churn)
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='MonthlyCharges', y='TotalCharges', hue='Churn', alpha=0.6)
plt.title("Monthly Charges vs. Total Charges by Churn")
plt.show()
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')

# Drop rows with missing values
df.dropna(inplace=True)

# Set style
sns.set(style="whitegrid")

# 1. Churn Count Plot
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='Churn', palette='Set2')
plt.title("Customer Churn Count")
plt.show()

# 2. Churn by Contract Type
plt.figure(figsize=(8, 4))
sns.countplot(data=df, x='Contract', hue='Churn', palette='Set1')
plt.title("Churn by Contract Type")
plt.xticks(rotation=15)
plt.show()

# 3. Distribution of Monthly Charges
plt.figure(figsize=(8, 4))
sns.histplot(df['MonthlyCharges'], bins=30, kde=True)
plt.title("Distribution of Monthly Charges")
plt.xlabel("Monthly Charges")
plt.ylabel("Number of Customers")
plt.show()

# 4. Monthly Charges vs. Total Charges (colored by Churn)
plt.figure(figsize=(8, 6))
sns.scatterplot(data=df, x='MonthlyCharges', y='TotalCharges', hue='Churn', alpha=0.6)
plt.title("Monthly Charges vs. Total Charges by Churn")
plt.show()

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluation
print("MSE:", mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2_score(y_test, y_pred))

# Make Predictions from New Input
new_customer = {
    'gender': 'Female',
    'SeniorCitizen': 0,
    'Partner': 'Yes',
    'Dependents': 'No',
    'tenure': 5,
    # Add remaining required features here
}

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
X_train,X_test,y_train,y_test=train_test_split(X_scaled,y,test_size=0.2,random_state=42)

pip install gradio

import pandas as pd
import gradio as gr
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression

# Load the dataset and preprocess it
df = pd.read_csv("WA_Fn-UseC_-Telco-Customer-Churn (2).csv")
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.dropna(inplace=True)
df.drop('customerID', axis=1, inplace=True)

# Encode target variable
label_encoder = LabelEncoder()
df['Churn'] = label_encoder.fit_transform(df['Churn'])

# One-hot encode categorical columns
categorical_cols = df.select_dtypes(include=['object']).columns
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_encoded.drop('Churn', axis=1))
y = df_encoded['Churn']

# Train a simple model
model = LogisticRegression()
model.fit(X_scaled, y)

# Define the prediction function
def predict_churn(Gender, SeniorCitizen, Partner, Dependents, tenure, PhoneService, MultipleLines,
                  InternetService, OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport,
                  StreamingTV, StreamingMovies, Contract, PaperlessBilling, PaymentMethod,
                  MonthlyCharges, TotalCharges):
    input_data = {
        'gender': Gender,
        'SeniorCitizen': int(SeniorCitizen),
        'Partner': Partner,
        'Dependents': Dependents,
        'tenure': int(tenure),
        'PhoneService': PhoneService,
        'MultipleLines': MultipleLines,
        'InternetService': InternetService,
        'OnlineSecurity': OnlineSecurity,
        'OnlineBackup': OnlineBackup,
        'DeviceProtection': DeviceProtection,
        'TechSupport': TechSupport,
        'StreamingTV': StreamingTV,
        'StreamingMovies': StreamingMovies,
        'Contract': Contract,
        'PaperlessBilling': PaperlessBilling,
        'PaymentMethod': PaymentMethod,
        'MonthlyCharges': float(MonthlyCharges),
        'TotalCharges': float(TotalCharges),
    }

    # Create DataFrame from input data
    input_df = pd.DataFrame([input_data])

    # Combine with original data for encoding
    df_temp = pd.concat([df.drop('MonthlyCharges', axis=1), input_df], ignore_index=True)

    # One-hot encode the new input data
    df_temp_encoded = pd.get_dummies(df_temp, drop_first=True)

    # Reorder columns to match the training set
    df_temp_encoded = df_temp_encoded.reindex(columns=df_encoded.drop('MonthlyCharges', axis=1).columns, fill_value=0)

    # Scale the new input
    scaled_input = scaler.transform(df_temp_encoded.tail(1))

    # Make prediction
    prediction = model.predict(scaled_input)

    # Return the prediction
    return round(prediction[0], 2)

inputs = [
    gr.Dropdown(['Male', 'Female'], label="Gender (Male/Female)"),
    gr.Checkbox(label="Senior Citizen (Yes/No)"),
    gr.Dropdown(['Yes', 'No'], label="Partner (Yes/No)"),
    gr.Dropdown(['Yes', 'No'], label="Dependents (Yes/No)"),
    gr.Number(label="Tenure (Months)", minimum=0, maximum=72, value=10),
    gr.Dropdown(['Yes', 'No'], label="Phone Service (Yes/No)"),
    gr.Dropdown(['Yes', 'No', 'No phone service'], label="Multiple Lines (Yes/No/No phone service)"),
    # Continue for the remaining fields...
]

"""create the gradio

"""

output=gr.Textbox(label="Churn Prediction")

gr.Interface(fn=predict_churn,inputs=inputs,outputs=output,title="Telco Customer Churn Prediction").launch()